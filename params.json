{
  "name": "SyBiOnt: The Synthetic Biology Ontology",
  "tagline": "",
  "body": "### SyBiOnt: The Synthetic Biology Open Language\r\n\r\nSyBiOnt is an application ontology for synthetic biology. We developed this ontology to represent the richset of biological knowledge about biological components and their relationships. We demonstrated the use of this ontology to create the SyBiOntKB knowledge base, incorporating and building upon existing life sciences ontologies and standards. The reasoning capabilities of ontologies were then applied to automate the mining of biological parts from this knowledge base. This approach is be useful to speed up synthetic biology design and ultimately help facilitate the automation of the biological engineering life cycle.\r\n\r\nThe basic biological parts used in the bottom-up design of synthetic systems include genetic features such as promoters, coding sequences (CDSs), ribosome binding sites (RBSs), terminators, and operators.The relationships among these parts and the gene products they encode, such as proteins, RNAs, transcription factors\r\n(TFs), and enzymes, need to be captured in order to design genetic circuits. Moreover, the incorporation of additional information about biological pathways and gene function is necessary to identify appropriate biological parts. Our goal when creating SyBiOnt was to allow a data definition framework to formalize the representation of the information that describes these parts and the relationships among them. SyBiOnt was designed to allow the incorporation of further information in the form of annotations that add extra, useful knowledge such as gene function. The ontology was developed using OWL semantics. The rich expressivity of OWL enables the construction of complex computational queries and automated reasoning across the integrated data.\r\n\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here [using GitHub Flavored Markdown](https://guides.github.com/features/mastering-markdown/), select a template crafted by a designer, and publish. After your page is generated, you can check out the new `gh-pages` branch locally. If you’re using GitHub Desktop, simply sync your repository and you’ll see the new branch.\r\n\r\n### Designer Templates\r\nWe’ve crafted some handsome templates for you to use. Go ahead and click 'Continue to layouts' to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved.\r\n\r\n### Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n\r\n[comment]: # (This actually is the most platform independent comment)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}