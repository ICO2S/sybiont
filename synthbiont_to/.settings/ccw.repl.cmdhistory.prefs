cmdhistory=["(save-ontology \\"ontology.owl\\" \:owl)" "(make-triples [[\\"http\://www.example.org/index.html\\"\\n                  \\"http\://purl.org/dc/elements/1.1/creator\\"\\n                  \\"http\://www.example.org/staffid/85740\\"]])" "(def n 2)" "(* n 4)" "(doc name)" "(doc string)" "(require clojure.string)" "(require 'clojure.string)" "(doc clojure.string/join)" "(doc clojure.string/join);" "(doc clojure.string/join);->" "(require 'clojure.string)\\n(doc clojure.string/join) ; ->" "(require 'clojure.string)\\n(doc clojure.string/join)" "(def y 0)" "(def v1 0)" "(def ^\:dynamic v 1) ; v is a global binding\\n\\n(defn f1 []\\n  (println \\"f1\: v\:\\" v)) \\n\\n(defn f2 []\\n  (println \\"f2\: before let v\:\\" v) \\n  ; creates local binding v that shadows global one\\n  (let [v 2]\\n    ; local binding only within this let statement\\n    (println \\"f2\: in let, v\:\\" v)\\n    (f1))\\n  ; outside of this let, v refers to global binding\\n  (println \\"f2\: after let v\:\\" v))\\n\\n(defn f3 []\\n  (println \\"f3\: before binding v\:\\" v) \\n  ; same global binding with new, temporary value\\n  (binding [v 3] \\n    ; global binding, new value\\n    (println \\"f3\: within binding function v\: \\" v) \\n    (f1)) ; calling f1 with new value to v\\n  ; outside of binding v refers to first global value\\n  (println \\"f3\: after binding v\:\\" v)) \\n\\n(defn f4 []\\n (def v 4)) ; changes the value of v in the global scope\\n\\n(println \\"(\= v 1) \=> \\" (\= v 1))\\n(println \\"Calling f2\: \\")\\n(f2)\\n(println)\\n(println \\"Calling f3\: \\")\\n(f3)\\n(println)\\n(println \\"Calling f4\: \\")\\n(f4)\\n(println \\"after calling f4, v \=\\" v)" "(def ^\:dynamic v 1) ; v is a global binding\\n\\n(defn f1 []\\n  (println \\"f1\: v\:\\" v)) \\n\\n(defn f2 []\\n  (println \\"f2\: before let v\:\\" v) \\n  ; creates local binding v that shadows global one\\n  (let [v 2]\\n    ; local binding only within this let statement\\n    (println \\"f2\: in let, v\:\\" v)\\n    (f1))\\n  ; outside of this let, v refers to global binding\\n  (println \\"f2\: after let v\:\\" v))\\n\\n(defn f3 []\\n  (println \\"f3\: before binding v\:\\" v) \\n  ; same global binding with new, temporary value\\n  (binding [v 3] \\n    ; global binding, new value\\n    (println \\"f3\: within binding function v\: \\" v) \\n    (f1)) ; calling f1 with new value to v\\n  ; outside of binding v refers to first global value\\n  (println \\"f3\: after binding v\:\\" v)) \\n\\n(defn f4 []\\n (def v 4)) ; changes the value of v in the global scope" "(println \\"(\= v 1) \=> \\" (\= v 1))" "(println \\"is x 1\\" (\= v 1))" "(def varBoolean (\= v 1 ))" "(println varBoolean)" "(def v2 (* v1 3))" "(println \\"Calling f2\: \\")" "(f2)" "(f3)" "(convert2)" "(convert3 \\"Hello\\")" "(hello \\"Goksel\\")" "(hello \\"df\\")" "(save-ontology \\"ontology.owl\\" \:owl)" "(hello2 \\"Gio\\")" "(hello \\"Goksel\\")" "(hello \\"fdg\\")" "(hello \\"goksel\\")" "(defn hello [who] (str \\"Hello1 \\" who \\" \!\\"))" "(hello \\"Goksel\\")" "(hello2 \\"Goksel\\")" "(convert)" "(hello2 \\"sdf\\")" "(convert \\"sdf\\")" "(convert \\"dfg\\")" "(convert2)" "(convert \\"dfg\\")" "(convert2)" "(convert2 3\\n          )" "(convert2 3)" "(convert2)" "(convert2 3\\n          )" "(convert2 3)" "(convert2 2)" "(convert2 1)" "(convert3 4)" "(convert 3)" "(convert 2)" "(convert )" "(convert 3)" "(convert 2)" "(convert 1)" "(convert 2)" "(convert2 2)" "(convert2 3)" "(convert2 a)" "(convert2 23)" "(convert)" "(convert )" "(convert)" "(creaetont)" "(createont )" "(convert )" "(convert)" "(convert )" "(convert)" "(createont)" "(creteont)" "(createont)" "foo" "(foo)" "(foo \\"dsf\\")" "(test)" "(testgm2)" "(hello \\"sdf\\"\\n       )" "(testgm2)" "(hello3)" "(hello2)" "(hello3)" "(hello1)" "(hello3)" "(hello3gm)" "(hello1)" "(createont)" "(creteont)" "(createont)" "(creteont)" "(createont)" "(subclasses Pizza)" "(print (subclasses Pizza))" "(testgm2)" "(createont)" "(creteont)" "(createont)" "(creteont)" "(createont)" "(craeteont)" "(createont)" "(testontology)" "(createont)" "(testontology)" "(createont)" "(testontology)" "(createont)" "(print (.getIRI synthbiont))" "OWLOntologyImpl" "(.getOntologyID synthbiont)" "(.getOntologyIRI (.getOntologyID synthbiont))" "(.toString (.getOntologyIRI (.getOntologyID synthbiont)))" "(createont)" "(creteont)" "(createont)" "(subclasses bacillondex \\"test5\\")" "(bacillondex)" "(subclasses bacillondex \\"Promoter\\")" "(subclasses bacillondex \\"test4\\")" "(subclasses bacillondex \\"test3\\")" "(superclasses bacillondex \\"test6\\")" "(subsclasses bacillondex \\"test6\\")" "(subclasses bacillondex \\"test6\\")" "(createont)" "(superclasses bacillondex \\"test7\\")" "(superclass? bacillondex (iri \\"http\://www.sybio.ncl.ac.uk\#test8\\") (iri \\"http\://www.bacillondex.org\#test7\\"))" "(superclass? bacillondex \\"test8\\" (iri \\"http\://www.bacillondex.org\#test7\\"))" "(createont)" "(superclasses bacillondex \\"test7\\")" "(superclass? bacillondex \\"test7\\" (iri \\"http\://www.sybio.ncl.ac.uk\#test8\\"))" "(createont)" "(def a (1,2))" "(def a [(owl-class \\"test1\\")])" "a" "(alength a)" "(print (alength a))" "(count a)" "(>\= (count a) 1)" "(>\= (count a) 0\\n    )" "(>\= ((count a) 0))" "(> 1 4)" "(>\= (count a) 2)" "(createont)"]
eclipse.preferences.version=1
